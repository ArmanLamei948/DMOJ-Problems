import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Selective_Cutting {

    static int[] seg;

    public static void main (String[] args) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(in.readLine());
        Queue<Integer> mIndexes[] = new Queue[20_001];
        Queue<Integer> qIndexes[] = new Queue[20_001];
        for (int i = 0; i <= 20_000; i++) {
            mIndexes[i] = new LinkedList<>();
            qIndexes[i] = new LinkedList<>();
        }
        String[] line = in.readLine().split(" ");
        int[] m = new int[n];
        for (int i = 0; i < n; i++) {
            m[i] = Integer.parseInt(line[i]);
            mIndexes[m[i]].add(i);
        }
        Arrays.sort(m);
        int Q = Integer.parseInt(in.readLine());
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] q = new int[Q];
        for (int i = 0; i < Q; i++) {
            line = in.readLine().split(" ");
            a[i] = Integer.parseInt(line[0]);
            b[i] = Integer.parseInt(line[1]);
            q[i] = Integer.parseInt(line[2]);
            qIndexes[q[i]].add(i);
        }
        Arrays.sort(q);
        int j = n - 1;
        double log = Math.log(n) / Math.log(2);
        int l = log % 1 == 0 ? (int) Math.pow(2, log + 1) - 1 : (int) Math.pow(2, (int) log + 2) - 1;
        seg = new int[l];
        int[] ans = new int[Q];
        for (int i = Q - 1; i >= 0; i--) {
            for (; j >= 0 && m[j] >= q[i]; j--) update(0, n - 1, 0, mIndexes[m[j]].remove(), m[j]);
            int o = qIndexes[q[i]].remove();
            ans[o] = sum(0, n - 1, 0, a[o], b[o]);
        }
        for (int i : ans) System.out.println(i);
    }
    static void update (int i, int j, int node, int index, int val) {
        if (i == j) seg[node] = val;
        else {
            int mid = (i + j) / 2;
            if (i <= index && index <= mid) update(i, mid, 2 * node + 1, index, val);
            else update(mid + 1, j, 2 * node + 2, index, val);
            seg[node] = seg[2 * node + 1] + seg[2 * node + 2];
        }
    }
    static int sum (int i, int j, int node, int l, int r) {
        if (l <= i && r >= j) return seg[node];
        if (l > j || r < i) return 0;
        int mid = (i + j) / 2;
        return sum(i, mid, 2 * node + 1, l, r) + sum(mid+1, j, 2 * node + 2, l, r);
    }
}
