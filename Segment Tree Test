import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.HashSet;

public class SegmentTreeTest {

    static int[] minSeg, gcfSeg;
    static HashMap<Integer, HashSet<Integer>> occurence = new HashMap<>();

    public static void main(String[] args) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String[] line = in.readLine().split(" ");
        int n = Integer.parseInt(line[0]);
        int m = Integer.parseInt(line[1]);
        int len = 4 * n;
        minSeg = new int[len];
        gcfSeg = new int[len];
        int[] arr = new int[n];
        line = in.readLine().split(" ");
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(line[i]);
            update(0, n - 1, 0, i, arr[i]);
        }
        for (int i = 0; i < m; i++) {
            line = in.readLine().split(" ");
            char c = line[0].charAt(0);
            int a = Integer.parseInt(line[1]);
            int b = Integer.parseInt(line[2]);
            if (c == 'C') {
                a--;
                occurence.get(arr[a]).remove(a);
                update(0, n - 1, 0, a, b);
                arr[a] = b;
            }
            if (c == 'M') System.out.println(minQuery(0, n - 1, 0, a - 1, b - 1));
            if (c == 'G') System.out.println(gcfQuery(0, n - 1, 0, a - 1, b - 1));
            if (c == 'Q') {
                a--;
                b--;
                int ans = 0;
                int gcf = gcfQuery(0, n - 1, 0, a, b);
                if (occurence.containsKey(gcf)) for (int j : occurence.get(gcf)) if (a <= j && j <= b) ans++;
                System.out.println(ans);
            }
        }
    }

    static void update (int i, int j, int node, int index, int val) {
        if (i == j) {
            minSeg[node] = val;
            gcfSeg[node] = val;
            if (!occurence.containsKey(val)) occurence.put(val, new HashSet<>());
            occurence.get(val).add(index);
            return;
        }
        int mid = (i + j) / 2;
        int a = 2 * node + 1;
        int b = a + 1;
        if (i <= index && index <= mid) update(i, mid, a, index, val);
        else update(mid + 1, j, b, index, val);
        minSeg[node] = Math.min(minSeg[a], minSeg[b]);
        gcfSeg[node] = gcf(gcfSeg[a], gcfSeg[b]);
    }

    static int gcf (int a, int b) {
        int min = Math.min(a, b);
        int max = Math.max(a, b);
        if (min == 0) return max;
        return gcf(min, max % min);
    }

    static int minQuery (int i, int j, int node, int l, int r) {
        if (l <= i && r >= j) return minSeg[node];
        if (l > j || r < i) return Integer.MAX_VALUE;
        int mid = (i + j) / 2;
        return Math.min(minQuery(i, mid, 2 * node + 1, l, r), minQuery(mid + 1, j, 2 * node + 2, l, r));
    }

    static int gcfQuery (int i, int j, int node, int l, int r) {
        if (l <= i && r >= j) return gcfSeg[node];
        if (l > j || r < i) return 0;
        int mid = (i + j) / 2;
        return gcf(gcfQuery(i, mid, 2 * node + 1, l, r), gcfQuery(mid + 1, j, 2 * node + 2, l, r));
    }
}
